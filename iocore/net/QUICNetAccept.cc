/** @file

  @section license License

  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 */

#include "ts/ink_config.h"
#include "P_Net.h"

#include "QUICConfig.h"
#include "QUICPacket.h"
#include "QUICDebugNames.h"
#include "QUICEvents.h"

void
initialize_thread_for_quic_net(EThread *thread)
{
  QUICNetAccept *na = get_QUICNetAccept(thread);

  new ((ink_dummy_for_new *)na) QUICNetAccept();
  na->mutex  = thread->mutex.get();
  na->thread = thread;

  thread->schedule_every(na, -10);
}

// TODO: Inherited from NetAccept
QUICNetAccept::QUICNetAccept() : Continuation(nullptr)
{
  SET_HANDLER(&QUICNetAccept::mainEvent);
}

QUICNetAccept::~QUICNetAccept()
{
}

int
QUICNetAccept::mainEvent(int event, void *data)
{
  ink_assert(event == EVENT_INTERVAL);

  process_long_header_packets();
  process_short_header_packets();
  process_newconn();

  return EVENT_CONT;
}

void
QUICNetAccept::process_long_header_packets()
{
  UDPPacketInternal *p = nullptr;
  IOBufferBlock *block;
  QUICConnectionId cid;
  QUICNetVConnection *vc;
  uint8_t *buf;
  uint8_t ptype;
  ip_port_text_buffer ipb;

  SList(UDPPacketInternal, alink) aq(longInQueue.popall());

  Queue<UDPPacketInternal> result;
  while ((p = aq.pop())) {
    block = p->getIOBlockChain();
    buf   = (uint8_t *)block->buf();
    ptype = buf[0] & 0x7f;
    switch (ptype) {
    case 0x02: { // Initial Packet
      // TODO: Anti DDoS of Initial Packet
      cid = QUICTypeUtil::read_QUICConnectionId(buf + 1, 8);
      Debug("quic_netaccept", "[%" PRIx64 "]Received a initial packet from %s, size=%" PRId64, static_cast<uint64_t>(cid),
            ats_ip_nptop(&p->from.sa, ipb, sizeof(ipb)), p->getPktLength());
      Connection con;
      con.setRemote(&p->from.sa);

      UnixUDPConnection *uc = static_cast<UnixUDPConnection *>(p->getConnection());
      QUICPacketHandler *ph = static_cast<QUICPacketHandler *>(uc->continuation);
      // Create a new NetVConnection
      vc = static_cast<QUICNetVConnection *>(getNetProcessor()->allocate_vc(uc->ethread));
      vc->init(cid, p->getConnection(), ph);
      vc->id = net_next_connection_number();
      vc->con.move(con);
      vc->submit_time = Thread::get_hrtime();
      vc->mutex       = new_ProxyMutex();
      vc->action_     = *ph->action_;
      vc->set_is_transparent(ph->opt.f_inbound_transparent);
      vc->set_context(NET_VCONNECTION_IN);
      vc->read.triggered = 1;
      vc->start(static_cast<QUICNetProcessor *>(getNetProcessor())->get_ssl_ctx());
      vc->options.ip_proto  = NetVCOptions::USE_UDP;
      vc->options.ip_family = p->from.sa.sa_family;

      // TODO: source ip + src port + cid as the key,
      // Because the cid is generated by client and there maybe cid collision between clients.
      this->_connections.put(cid, vc);
      ph->action_->continuation->handleEvent(NET_EVENT_ACCEPT, vc);

      if (vc->is_closed()) {
        this->_connections.put(vc->connection_id(), nullptr);
        p->free();
        vc->free(vc->thread);
      } else {
        vc->push_packet(p);
        // 0-RTT Packet may be received before Initial Packet
        // TODO: Index zeroRTTQueue with ConnID by hash table
        UDPPacket *up = zeroRTTQueue.head;
        while (up) {
          QUICConnectionId cid2;
          block = up->getIOBlockChain();
          buf   = (uint8_t *)block->buf();
          cid2  = QUICTypeUtil::read_QUICConnectionId(buf + 1, 8);
          if (cid == cid2) {
            UDPPacket *oldp = zeroRTTQueue.prev(up);
            zeroRTTQueue.remove(up);
            vc->push_packet(up);
            up = oldp ? zeroRTTQueue.next(oldp) : zeroRTTQueue.head;
            continue;
          }
          up = zeroRTTQueue.next(up);
        }
        vc->handleEvent(QUIC_EVENT_PACKET_READ_READY, nullptr);
      }
    } break;
    case 0x04: // Handshake Packet
    case 0x05: // 0-RTT Pakcet
      result.push(p);
      break;
    case 0x01: // Version Negotiation Packet
    case 0x03: // Retry Packet
    default:
      Debug("quic_netaccept", "Received a long header packet with bad type %d from %s, size=%" PRId64, ptype,
            ats_ip_nptop(&p->from.sa, ipb, sizeof(ipb)), p->getPktLength());
      p->free();
      break;
    }
  }

  while ((p = result.dequeue())) {
    block = p->getIOBlockChain();
    buf   = (uint8_t *)block->buf();
    ptype = buf[0] & 0x7f;
    cid   = QUICTypeUtil::read_QUICConnectionId(buf + 1, 8);
    Debug("quic_netaccept", "[%" PRIx64 "]Received a long header packet with type %d from %s, size=%" PRId64,
          static_cast<uint64_t>(cid), ptype, ats_ip_nptop(&p->from.sa, ipb, sizeof(ipb)), p->getPktLength());

	vc = this->_connections.get(cid);
	if (ptype == 0x05) {
      // Attach 0-RTT Packet to QUICNetVC if the Initial Packet was received
      // Or save 0-RTT Packet into zeroRTTQueue
	  if (vc) {
        vc->push_packet(p);
      } else {
        zeroRTTQueue.enqueue(p);
      }
    } else if (ptype == 0x04) {
      // Handshake Done and decrypt attached 0-RTT Packets
      // Call back NET_EVENT_ACCEPT
      if (vc) {
        
      } else {
        // bad handshake packet
        p->free();
      }
    } else {
      p->free();
      ink_assert(!"should not reached");
    }
  }
}

void
QUICNetAccept::process_short_header_packets()
{
}

void
QUICNetAccept::process_newconn()
{
}

//
// Private methods
//

/*
void
QUICPacketHandler::_recv_packet(int event, UDPPacket *udpPacket)
{
  IOBufferBlock *block = udpPacket->getIOBlockChain();

  QUICConnectionId cid;
  bool res = this->_read_connection_id(cid, block);

  ip_port_text_buffer ipb;
  Debug("quic_sec", "[%" PRIx64 "] received packet from %s, size=%" PRId64, static_cast<uint64_t>(cid),
        ats_ip_nptop(&udpPacket->from.sa, ipb, sizeof(ipb)), udpPacket->getPktLength());

  QUICNetVConnection *vc = nullptr;
  if (res) {
    vc = this->_connections.get(cid);
  } else {
    // TODO: find vc from five tuples
    ink_assert(false);
  }

  if (!vc) {
    Connection con;
    con.setRemote(&udpPacket->from.sa);

    // Send stateless reset if the packet is not a initial packet
    if (!QUICTypeUtil::hasLongHeader(reinterpret_cast<const uint8_t *>(block->buf()))) {
      QUICStatelessToken token;
      {
        QUICConfig::scoped_config params;
        token.generate(cid ^ params->server_id());
      }
      auto packet = QUICPacketFactory::create_stateless_reset_packet(cid, token);
      this->send_packet(*packet, udpPacket->getConnection(), con.addr, 1200);
      return;
    }

    // Create a new NetVConnection
    vc =
      static_cast<QUICNetVConnection *>(getNetProcessor()->allocate_vc(((UnixUDPConnection *)udpPacket->getConnection())->ethread));
    vc->init(cid, udpPacket->getConnection(), this);
    vc->id = net_next_connection_number();
    vc->con.move(con);
    vc->submit_time = Thread::get_hrtime();
    vc->mutex       = this->mutex;
    vc->action_     = *this->action_;
    vc->set_is_transparent(this->opt.f_inbound_transparent);
    vc->set_context(NET_VCONNECTION_IN);
    vc->read.triggered = 1;
        vc->start(static_cast<QUICNetProcessor *>(getNetProcessor())->get_ssl_ctx());
    vc->options.ip_proto  = NetVCOptions::USE_UDP;
    vc->options.ip_family = udpPacket->from.sa.sa_family;

    this->_connections.put(cid, vc);
    this->action_->continuation->handleEvent(NET_EVENT_ACCEPT, vc);
  }

  if (vc->is_closed()) {
    this->_connections.put(vc->connection_id(), nullptr);
    // FIXME QUICNetVConnection is NOT freed to prevent crashes. #2674
    // QUICNetVConnections are going to be freed by QUICNetHandler
    // vc->free(vc->thread);
  } else {
    vc->push_packet(udpPacket);
    eventProcessor.schedule_imm(vc, ET_CALL, QUIC_EVENT_PACKET_READ_READY, nullptr);
  }
}
*/

// TODO: Should be called via eventProcessor?
void
QUICPacketHandler::send_packet(const QUICPacket &packet, QUICNetVConnection *vc)
{
  // TODO: remove a connection which is created by Client Initial
  //       or update key to new one
  if (!this->_connections.get(packet.connection_id())) {
    this->_connections.put(packet.connection_id(), vc);
  }

  this->send_packet(packet, vc->get_udp_con(), vc->con.addr, vc->pmtu());
}

void
QUICPacketHandler::send_packet(const QUICPacket &packet, UDPConnection *udp_con, IpEndpoint &addr, uint32_t pmtu)
{
  size_t udp_len;
  Ptr<IOBufferBlock> udp_payload(new_IOBufferBlock());
  udp_payload->alloc(iobuffer_size_to_index(pmtu));
  packet.store(reinterpret_cast<uint8_t *>(udp_payload->end()), &udp_len);
  udp_payload->fill(udp_len);

  UDPPacket *udpPkt = new_UDPPacket(addr, 0, udp_payload);

  // NOTE: p will be enqueued to udpOutQueue of UDPNetHandler
  ip_port_text_buffer ipb;
  Debug("quic_sec", "[%" PRIx64 "] send %s packet to %s, size=%" PRId64, static_cast<uint64_t>(packet.connection_id()),
        QUICDebugNames::packet_type(packet.type()), ats_ip_nptop(&udpPkt->to.sa, ipb, sizeof(ipb)), udpPkt->getPktLength());

  udp_con->send(this, udpPkt);
}
